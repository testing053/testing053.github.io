{"uid":"668fc27caae38016","name":"testcase_053","fullName":"Testcase_Upload_Financing#testcase_053","historyId":"451b933c74eed8f139d2955dae2ecadf","time":{"start":1726251879615,"stop":1726251881950,"duration":2335},"description":"\n    * Data Uji:\n    - Tenor: 3 bulan\n    - Tanggal Akad Kredit: 2025/01/25\n    - Tanggal Angsuran: 31\n\n    Harapan: angsuran pertama 2025-02-28 dan angsuran terakhir dibayar 2025-05-31\n    ","descriptionHtml":"<pre><code>* Data Uji:\n- Tenor: 3 bulan\n- Tanggal Akad Kredit: 2025/01/25\n- Tanggal Angsuran: 31\n\nHarapan: angsuran pertama 2025-02-28 dan angsuran terakhir dibayar 2025-05-31\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=128.0.6613.120)\nStacktrace:\n\tGetHandleVerifier [0x0120D933+25811]\n\t(No symbol) [0x0119E314]\n\t(No symbol) [0x01092399]\n\t(No symbol) [0x010D84E4]\n\t(No symbol) [0x010CD9DF]\n\t(No symbol) [0x010FAD2C]\n\t(No symbol) [0x010CD475]\n\t(No symbol) [0x010FAFC4]\n\t(No symbol) [0x011146F0]\n\t(No symbol) [0x010FAAC6]\n\t(No symbol) [0x010CBEFD]\n\t(No symbol) [0x010CC8FD]\n\tGetHandleVerifier [0x014DF143+2981091]\n\tGetHandleVerifier [0x01532FF9+3324825]\n\tGetHandleVerifier [0x0129B32F+605903]\n\tGetHandleVerifier [0x012A2CBC+637020]\n\t(No symbol) [0x011A6F4D]\n\t(No symbol) [0x011A3DD8]\n\t(No symbol) [0x011A3F75]\n\t(No symbol) [0x01196406]\n\tBaseThreadInitThunk [0x771C7BA9+25]\n\tRtlInitializeExceptionChain [0x77B4C10B+107]\n\tRtlClearBits [0x77B4C08F+191]","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bbbf3a0d22fc88a0cb14f2e0c985faf4\")>\n\n    @allure.feature('Upload Loan Financing')\n    @allure.story('Skenario Tanggal Angsuran')\n    @allure.severity(allure.severity_level.NORMAL)\n    def testcase_053(browser):\n        \"\"\"\n        * Data Uji:\n        - Tenor: 3 bulan\n        - Tanggal Akad Kredit: 2025/01/25\n        - Tanggal Angsuran: 31\n    \n        Harapan: angsuran pertama 2025-02-28 dan angsuran terakhir dibayar 2025-05-31\n        \"\"\"\n        try:\n            with allure.step(\"Input Tenor\"):\n                click_tenor = WebDriverWait(browser, 10).until(\n                    EC.element_to_be_clickable((By.XPATH, \"//input[@id='tenor']\"))\n                )\n                browser.execute_script(\"arguments[0].scrollIntoView(true);\", click_tenor)\n                time.sleep(1)\n                click_tenor.click()\n                time.sleep(1)\n    \n                tenor_options = [\"3 Bulan\"]\n                selected_tenor = random.choice(tenor_options)\n                option_xpath = f'//div[@id=\"tenor-dropdown\"]//button[text()=\"{selected_tenor}\"]'\n    \n                # Tunggu sampai opsi tersedia\n                option = WebDriverWait(browser, 10).until(\n                    EC.presence_of_element_located((By.XPATH, option_xpath))\n                )\n>               option.click()\n\nTestcase_Upload_Financing.py:2024: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\mytest\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\mytest\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\mytest\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000192D2087400>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...dInitThunk [0x771C7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77B4C10B+107]\\\\n\\\\tRtlClearBits [0x77B4C08F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=128.0.6613.120)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0120D933+25811]\nE       \t(No symbol) [0x0119E314]\nE       \t(No symbol) [0x01092399]\nE       \t(No symbol) [0x010D84E4]\nE       \t(No symbol) [0x010CD9DF]\nE       \t(No symbol) [0x010FAD2C]\nE       \t(No symbol) [0x010CD475]\nE       \t(No symbol) [0x010FAFC4]\nE       \t(No symbol) [0x011146F0]\nE       \t(No symbol) [0x010FAAC6]\nE       \t(No symbol) [0x010CBEFD]\nE       \t(No symbol) [0x010CC8FD]\nE       \tGetHandleVerifier [0x014DF143+2981091]\nE       \tGetHandleVerifier [0x01532FF9+3324825]\nE       \tGetHandleVerifier [0x0129B32F+605903]\nE       \tGetHandleVerifier [0x012A2CBC+637020]\nE       \t(No symbol) [0x011A6F4D]\nE       \t(No symbol) [0x011A3DD8]\nE       \t(No symbol) [0x011A3F75]\nE       \t(No symbol) [0x01196406]\nE       \tBaseThreadInitThunk [0x771C7BA9+25]\nE       \tRtlInitializeExceptionChain [0x77B4C10B+107]\nE       \tRtlClearBits [0x77B4C08F+191]\n\n..\\mytest\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1726251658928,"stop":1726251659016,"duration":88},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"browser","time":{"start":1726251659016,"stop":1726251661539,"duration":2523},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"setup_and_teardown","time":{"start":1726251661539,"stop":1726251666171,"duration":4632},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"description":"\n    * Data Uji:\n    - Tenor: 3 bulan\n    - Tanggal Akad Kredit: 2025/01/25\n    - Tanggal Angsuran: 31\n\n    Harapan: angsuran pertama 2025-02-28 dan angsuran terakhir dibayar 2025-05-31\n    ","status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=128.0.6613.120)\nStacktrace:\n\tGetHandleVerifier [0x0120D933+25811]\n\t(No symbol) [0x0119E314]\n\t(No symbol) [0x01092399]\n\t(No symbol) [0x010D84E4]\n\t(No symbol) [0x010CD9DF]\n\t(No symbol) [0x010FAD2C]\n\t(No symbol) [0x010CD475]\n\t(No symbol) [0x010FAFC4]\n\t(No symbol) [0x011146F0]\n\t(No symbol) [0x010FAAC6]\n\t(No symbol) [0x010CBEFD]\n\t(No symbol) [0x010CC8FD]\n\tGetHandleVerifier [0x014DF143+2981091]\n\tGetHandleVerifier [0x01532FF9+3324825]\n\tGetHandleVerifier [0x0129B32F+605903]\n\tGetHandleVerifier [0x012A2CBC+637020]\n\t(No symbol) [0x011A6F4D]\n\t(No symbol) [0x011A3DD8]\n\t(No symbol) [0x011A3F75]\n\t(No symbol) [0x01196406]\n\tBaseThreadInitThunk [0x771C7BA9+25]\n\tRtlInitializeExceptionChain [0x77B4C10B+107]\n\tRtlClearBits [0x77B4C08F+191]","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bbbf3a0d22fc88a0cb14f2e0c985faf4\")>\n\n    @allure.feature('Upload Loan Financing')\n    @allure.story('Skenario Tanggal Angsuran')\n    @allure.severity(allure.severity_level.NORMAL)\n    def testcase_053(browser):\n        \"\"\"\n        * Data Uji:\n        - Tenor: 3 bulan\n        - Tanggal Akad Kredit: 2025/01/25\n        - Tanggal Angsuran: 31\n    \n        Harapan: angsuran pertama 2025-02-28 dan angsuran terakhir dibayar 2025-05-31\n        \"\"\"\n        try:\n            with allure.step(\"Input Tenor\"):\n                click_tenor = WebDriverWait(browser, 10).until(\n                    EC.element_to_be_clickable((By.XPATH, \"//input[@id='tenor']\"))\n                )\n                browser.execute_script(\"arguments[0].scrollIntoView(true);\", click_tenor)\n                time.sleep(1)\n                click_tenor.click()\n                time.sleep(1)\n    \n                tenor_options = [\"3 Bulan\"]\n                selected_tenor = random.choice(tenor_options)\n                option_xpath = f'//div[@id=\"tenor-dropdown\"]//button[text()=\"{selected_tenor}\"]'\n    \n                # Tunggu sampai opsi tersedia\n                option = WebDriverWait(browser, 10).until(\n                    EC.presence_of_element_located((By.XPATH, option_xpath))\n                )\n>               option.click()\n\nTestcase_Upload_Financing.py:2024: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\mytest\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\mytest\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\mytest\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000192D2087400>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...dInitThunk [0x771C7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77B4C10B+107]\\\\n\\\\tRtlClearBits [0x77B4C08F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=128.0.6613.120)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0120D933+25811]\nE       \t(No symbol) [0x0119E314]\nE       \t(No symbol) [0x01092399]\nE       \t(No symbol) [0x010D84E4]\nE       \t(No symbol) [0x010CD9DF]\nE       \t(No symbol) [0x010FAD2C]\nE       \t(No symbol) [0x010CD475]\nE       \t(No symbol) [0x010FAFC4]\nE       \t(No symbol) [0x011146F0]\nE       \t(No symbol) [0x010FAAC6]\nE       \t(No symbol) [0x010CBEFD]\nE       \t(No symbol) [0x010CC8FD]\nE       \tGetHandleVerifier [0x014DF143+2981091]\nE       \tGetHandleVerifier [0x01532FF9+3324825]\nE       \tGetHandleVerifier [0x0129B32F+605903]\nE       \tGetHandleVerifier [0x012A2CBC+637020]\nE       \t(No symbol) [0x011A6F4D]\nE       \t(No symbol) [0x011A3DD8]\nE       \t(No symbol) [0x011A3F75]\nE       \t(No symbol) [0x01196406]\nE       \tBaseThreadInitThunk [0x771C7BA9+25]\nE       \tRtlInitializeExceptionChain [0x77B4C10B+107]\nE       \tRtlClearBits [0x77B4C08F+191]\n\n..\\mytest\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","steps":[{"name":"Input Tenor","time":{"start":1726251879615,"stop":1726251881804,"duration":2189},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=128.0.6613.120)\nStacktrace:\n\tGetHandleVerifier [0x0120D933+25811]\n\t(No symbol) [0x0119E314]\n\t(No symbol) [0x01092399]\n\t(No symbol) [0x010D84E4]\n\t(No symbol) [0x010CD9DF]\n\t(No symbol) [0x010FAD2C]\n\t(No symbol) [0x010CD475]\n\t(No symbol) [0x010FAFC4]\n\t(No symbol) [0x011146F0]\n\t(No symbol) [0x010FAAC6]\n\t(No symbol) [0x010CBEFD]\n\t(No symbol) [0x010CC8FD]\n\tGetHandleVerifier [0x014DF143+2981091]\n\tGetHandleVerifier [0x01532FF9+3324825]\n\tGetHandleVerifier [0x0129B32F+605903]\n\tGetHandleVerifier [0x012A2CBC+637020]\n\t(No symbol) [0x011A6F4D]\n\t(No symbol) [0x011A3DD8]\n\t(No symbol) [0x011A3F75]\n\t(No symbol) [0x01196406]\n\tBaseThreadInitThunk [0x771C7BA9+25]\n\tRtlInitializeExceptionChain [0x77B4C10B+107]\n\tRtlClearBits [0x77B4C08F+191]\n\n","statusTrace":"  File \"C:\\Users\\irsan\\PycharmProjects\\Testing Allure\\Testing\\Testcase_Upload_Financing.py\", line 2024, in testcase_053\n    option.click()\n  File \"C:\\Users\\irsan\\PycharmProjects\\Testing Allure\\mytest\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\irsan\\PycharmProjects\\Testing Allure\\mytest\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"C:\\Users\\irsan\\PycharmProjects\\Testing Allure\\mytest\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\irsan\\PycharmProjects\\Testing Allure\\mytest\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true}],"attachments":[{"uid":"b3a9fcf0047646e1","name":"Screenshot Error","source":"b3a9fcf0047646e1.png","type":"image/png","size":61425},{"uid":"867d92f3d6be8fd5","name":"log","source":"867d92f3d6be8fd5.txt","type":"text/plain","size":853}],"parameters":[],"stepsCount":1,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":true},"afterStages":[{"name":"browser::0","time":{"start":1726251953843,"stop":1726251956106,"duration":2263},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"setup_and_teardown::0","time":{"start":1726251953843,"stop":1726251953843,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"feature","value":"Upload Loan Financing"},{"name":"severity","value":"normal"},{"name":"story","value":"Skenario Tanggal Angsuran"},{"name":"suite","value":"Testcase_Upload_Financing"},{"name":"host","value":"LAPTOP-1965Q82V"},{"name":"thread","value":"20172-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Testcase_Upload_Financing"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"668fc27caae38016.json","parameterValues":[]}