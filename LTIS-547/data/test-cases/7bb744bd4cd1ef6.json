{"uid":"7bb744bd4cd1ef6","name":"testcase_069","fullName":"Testcase_Upload_Financing#testcase_069","historyId":"b75015ef90086ab589dc73a8de60ed50","time":{"start":1726575628466,"stop":1726575632145,"duration":3679},"description":"Testcase *Negatif*: Nilai Jaminan 2 diisi otomatis dengan 0 jika Jenis Jaminan 2 diisi None","descriptionHtml":"<p>Testcase <em>Negatif</em>: Nilai Jaminan 2 diisi otomatis dengan 0 jika Jenis Jaminan 2 diisi None</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.InvalidElementStateException: Message: invalid element state\n  (Session info: chrome=128.0.6613.138)\nStacktrace:\n\tGetHandleVerifier [0x00E9D933+25811]\n\t(No symbol) [0x00E2E314]\n\t(No symbol) [0x00D22399]\n\t(No symbol) [0x00D5F113]\n\t(No symbol) [0x00D8AD2C]\n\t(No symbol) [0x00D5D475]\n\t(No symbol) [0x00D8AFC4]\n\t(No symbol) [0x00DA46F0]\n\t(No symbol) [0x00D8AAC6]\n\t(No symbol) [0x00D5BEFD]\n\t(No symbol) [0x00D5C8FD]\n\tGetHandleVerifier [0x0116F143+2981091]\n\tGetHandleVerifier [0x011C2FF9+3324825]\n\tGetHandleVerifier [0x00F2B32F+605903]\n\tGetHandleVerifier [0x00F32CBC+637020]\n\t(No symbol) [0x00E36F4D]\n\t(No symbol) [0x00E33DD8]\n\t(No symbol) [0x00E33F75]\n\t(No symbol) [0x00E26406]\n\tBaseThreadInitThunk [0x768D7BA9+25]\n\tRtlInitializeExceptionChain [0x774FC11B+107]\n\tRtlClearBits [0x774FC09F+191]","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d3c7ad8804f5b8d60435814c32b1346d\")>\n\n    @allure.feature('Upload Loan Financing')\n    @allure.story('Nilai Jaminan 2 diisi otomatis dengan 0 jika Jenis Jaminan 2 diisi None')\n    @allure.severity(allure.severity_level.NORMAL)\n    def testcase_069(browser):\n        \"\"\"Testcase *Negatif*: Nilai Jaminan 2 diisi otomatis dengan 0 jika Jenis Jaminan 2 diisi None\"\"\"\n        try:\n            with allure.step(\"Pilih None untuk Jenis Jaminan 2\"):\n                click_Jenis_Jaminan_2 = WebDriverWait(browser, 10).until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='collateral-2']\")))\n                browser.execute_script(\"arguments[0].scrollIntoView(true);\", click_Jenis_Jaminan_2)\n                time.sleep(1)\n                click_Jenis_Jaminan_2.click()\n    \n                option_xpath_none = '//button[contains(text(),\"None\")]'\n                option_none = WebDriverWait(browser, 10).until(EC.element_to_be_clickable((By.XPATH, option_xpath_none)))\n                option_none.click()\n                time.sleep(1)\n    \n                selected_value_2 = click_Jenis_Jaminan_2.get_attribute('value')\n                assert selected_value_2 == \"None\", (\n                    f\"Jenis Jaminan yang dipilih seharusnya 'None', tetapi ditemukan '{selected_value_2}'.\"\n                )\n    \n            with allure.step(\"Verifikasi Nilai Jaminan 2 diisi otomatis dengan 0 dan tidak bisa di edit\"):\n                nilai_jaminan_2 = WebDriverWait(browser, 10).until(EC.visibility_of_element_located((By.XPATH, \"//input[@id='collateral-value-2']\")))\n                expected_value = \"0\"\n                actual_value = nilai_jaminan_2.get_attribute('value')\n                assert actual_value == expected_value, (\n                    f\"Nilai jaminan seharusnya otomatis diisi dengan '{expected_value}', tetapi ditemukan '{actual_value}'.\"\n                )\n    \n                nilai_jaminan_2.send_keys(\"123456\")\n                actual_value_after_edit = nilai_jaminan_2.get_attribute('value')\n                assert actual_value_after_edit == expected_value, (\n                    \"Nilai jaminan seharusnya tidak bisa diubah setelah diatur ke 0.\"\n                )\n    \n                browser.execute_script(\"arguments[0].scrollIntoView(true);\", nilai_jaminan_2)\n                time.sleep(1)\n    \n                allure.attach(nilai_jaminan_2.get_attribute('value'), name=\"Nilai Jaminan 2\", attachment_type=allure.attachment_type.TEXT)\n                allure.attach(browser.get_screenshot_as_png(), name=\"Screenshot Verifikasi Nilai Jaminan 2 Otomatis\")\n    \n            click_Jenis_Jaminan_2.clear()\n>           nilai_jaminan_2.clear()\n\nTestcase_Upload_Financing.py:2876: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\mytest\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:117: in clear\n    self._execute(Command.CLEAR_ELEMENT)\n..\\mytest\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\mytest\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F9A75DF3D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid element state\",\"message\":\"invalid element state\\\\n  (Session info...dInitThunk [0x768D7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x774FC11B+107]\\\\n\\\\tRtlClearBits [0x774FC09F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidElementStateException: Message: invalid element state\nE         (Session info: chrome=128.0.6613.138)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00E9D933+25811]\nE       \t(No symbol) [0x00E2E314]\nE       \t(No symbol) [0x00D22399]\nE       \t(No symbol) [0x00D5F113]\nE       \t(No symbol) [0x00D8AD2C]\nE       \t(No symbol) [0x00D5D475]\nE       \t(No symbol) [0x00D8AFC4]\nE       \t(No symbol) [0x00DA46F0]\nE       \t(No symbol) [0x00D8AAC6]\nE       \t(No symbol) [0x00D5BEFD]\nE       \t(No symbol) [0x00D5C8FD]\nE       \tGetHandleVerifier [0x0116F143+2981091]\nE       \tGetHandleVerifier [0x011C2FF9+3324825]\nE       \tGetHandleVerifier [0x00F2B32F+605903]\nE       \tGetHandleVerifier [0x00F32CBC+637020]\nE       \t(No symbol) [0x00E36F4D]\nE       \t(No symbol) [0x00E33DD8]\nE       \t(No symbol) [0x00E33F75]\nE       \t(No symbol) [0x00E26406]\nE       \tBaseThreadInitThunk [0x768D7BA9+25]\nE       \tRtlInitializeExceptionChain [0x774FC11B+107]\nE       \tRtlClearBits [0x774FC09F+191]\n\n..\\mytest\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidElementStateException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1726575582233,"stop":1726575582312,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"browser","time":{"start":1726575582312,"stop":1726575585512,"duration":3200},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"setup_and_teardown","time":{"start":1726575585513,"stop":1726575614086,"duration":28573},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"description":"Testcase *Negatif*: Nilai Jaminan 2 diisi otomatis dengan 0 jika Jenis Jaminan 2 diisi None","status":"broken","statusMessage":"selenium.common.exceptions.InvalidElementStateException: Message: invalid element state\n  (Session info: chrome=128.0.6613.138)\nStacktrace:\n\tGetHandleVerifier [0x00E9D933+25811]\n\t(No symbol) [0x00E2E314]\n\t(No symbol) [0x00D22399]\n\t(No symbol) [0x00D5F113]\n\t(No symbol) [0x00D8AD2C]\n\t(No symbol) [0x00D5D475]\n\t(No symbol) [0x00D8AFC4]\n\t(No symbol) [0x00DA46F0]\n\t(No symbol) [0x00D8AAC6]\n\t(No symbol) [0x00D5BEFD]\n\t(No symbol) [0x00D5C8FD]\n\tGetHandleVerifier [0x0116F143+2981091]\n\tGetHandleVerifier [0x011C2FF9+3324825]\n\tGetHandleVerifier [0x00F2B32F+605903]\n\tGetHandleVerifier [0x00F32CBC+637020]\n\t(No symbol) [0x00E36F4D]\n\t(No symbol) [0x00E33DD8]\n\t(No symbol) [0x00E33F75]\n\t(No symbol) [0x00E26406]\n\tBaseThreadInitThunk [0x768D7BA9+25]\n\tRtlInitializeExceptionChain [0x774FC11B+107]\n\tRtlClearBits [0x774FC09F+191]","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d3c7ad8804f5b8d60435814c32b1346d\")>\n\n    @allure.feature('Upload Loan Financing')\n    @allure.story('Nilai Jaminan 2 diisi otomatis dengan 0 jika Jenis Jaminan 2 diisi None')\n    @allure.severity(allure.severity_level.NORMAL)\n    def testcase_069(browser):\n        \"\"\"Testcase *Negatif*: Nilai Jaminan 2 diisi otomatis dengan 0 jika Jenis Jaminan 2 diisi None\"\"\"\n        try:\n            with allure.step(\"Pilih None untuk Jenis Jaminan 2\"):\n                click_Jenis_Jaminan_2 = WebDriverWait(browser, 10).until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='collateral-2']\")))\n                browser.execute_script(\"arguments[0].scrollIntoView(true);\", click_Jenis_Jaminan_2)\n                time.sleep(1)\n                click_Jenis_Jaminan_2.click()\n    \n                option_xpath_none = '//button[contains(text(),\"None\")]'\n                option_none = WebDriverWait(browser, 10).until(EC.element_to_be_clickable((By.XPATH, option_xpath_none)))\n                option_none.click()\n                time.sleep(1)\n    \n                selected_value_2 = click_Jenis_Jaminan_2.get_attribute('value')\n                assert selected_value_2 == \"None\", (\n                    f\"Jenis Jaminan yang dipilih seharusnya 'None', tetapi ditemukan '{selected_value_2}'.\"\n                )\n    \n            with allure.step(\"Verifikasi Nilai Jaminan 2 diisi otomatis dengan 0 dan tidak bisa di edit\"):\n                nilai_jaminan_2 = WebDriverWait(browser, 10).until(EC.visibility_of_element_located((By.XPATH, \"//input[@id='collateral-value-2']\")))\n                expected_value = \"0\"\n                actual_value = nilai_jaminan_2.get_attribute('value')\n                assert actual_value == expected_value, (\n                    f\"Nilai jaminan seharusnya otomatis diisi dengan '{expected_value}', tetapi ditemukan '{actual_value}'.\"\n                )\n    \n                nilai_jaminan_2.send_keys(\"123456\")\n                actual_value_after_edit = nilai_jaminan_2.get_attribute('value')\n                assert actual_value_after_edit == expected_value, (\n                    \"Nilai jaminan seharusnya tidak bisa diubah setelah diatur ke 0.\"\n                )\n    \n                browser.execute_script(\"arguments[0].scrollIntoView(true);\", nilai_jaminan_2)\n                time.sleep(1)\n    \n                allure.attach(nilai_jaminan_2.get_attribute('value'), name=\"Nilai Jaminan 2\", attachment_type=allure.attachment_type.TEXT)\n                allure.attach(browser.get_screenshot_as_png(), name=\"Screenshot Verifikasi Nilai Jaminan 2 Otomatis\")\n    \n            click_Jenis_Jaminan_2.clear()\n>           nilai_jaminan_2.clear()\n\nTestcase_Upload_Financing.py:2876: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\mytest\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:117: in clear\n    self._execute(Command.CLEAR_ELEMENT)\n..\\mytest\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\mytest\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F9A75DF3D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid element state\",\"message\":\"invalid element state\\\\n  (Session info...dInitThunk [0x768D7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x774FC11B+107]\\\\n\\\\tRtlClearBits [0x774FC09F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidElementStateException: Message: invalid element state\nE         (Session info: chrome=128.0.6613.138)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00E9D933+25811]\nE       \t(No symbol) [0x00E2E314]\nE       \t(No symbol) [0x00D22399]\nE       \t(No symbol) [0x00D5F113]\nE       \t(No symbol) [0x00D8AD2C]\nE       \t(No symbol) [0x00D5D475]\nE       \t(No symbol) [0x00D8AFC4]\nE       \t(No symbol) [0x00DA46F0]\nE       \t(No symbol) [0x00D8AAC6]\nE       \t(No symbol) [0x00D5BEFD]\nE       \t(No symbol) [0x00D5C8FD]\nE       \tGetHandleVerifier [0x0116F143+2981091]\nE       \tGetHandleVerifier [0x011C2FF9+3324825]\nE       \tGetHandleVerifier [0x00F2B32F+605903]\nE       \tGetHandleVerifier [0x00F32CBC+637020]\nE       \t(No symbol) [0x00E36F4D]\nE       \t(No symbol) [0x00E33DD8]\nE       \t(No symbol) [0x00E33F75]\nE       \t(No symbol) [0x00E26406]\nE       \tBaseThreadInitThunk [0x768D7BA9+25]\nE       \tRtlInitializeExceptionChain [0x774FC11B+107]\nE       \tRtlClearBits [0x774FC09F+191]\n\n..\\mytest\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidElementStateException","steps":[{"name":"Pilih None untuk Jenis Jaminan 2","time":{"start":1726575628466,"stop":1726575630749,"duration":2283},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Verifikasi Nilai Jaminan 2 diisi otomatis dengan 0 dan tidak bisa di edit","time":{"start":1726575630749,"stop":1726575631957,"duration":1208},"status":"passed","steps":[],"attachments":[{"uid":"dad1826e3393c40c","name":"Nilai Jaminan 2","source":"dad1826e3393c40c.txt","type":"text/plain","size":1},{"uid":"6774c7a589a6756","name":"Screenshot Verifikasi Nilai Jaminan 2 Otomatis","source":"6774c7a589a6756.attach","type":"image/png","size":58768}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[{"uid":"486a486120a5643e","name":"Screenshot Error","source":"486a486120a5643e.png","type":"image/png","size":60508}],"parameters":[],"stepsCount":2,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"setup_and_teardown::0","time":{"start":1726575632235,"stop":1726575632235,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"browser::0","time":{"start":1726575632236,"stop":1726575634442,"duration":2206},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"story","value":"Nilai Jaminan 2 diisi otomatis dengan 0 jika Jenis Jaminan 2 diisi None"},{"name":"feature","value":"Upload Loan Financing"},{"name":"severity","value":"normal"},{"name":"suite","value":"Testcase_Upload_Financing"},{"name":"host","value":"LAPTOP-1965Q82V"},{"name":"thread","value":"20992-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Testcase_Upload_Financing"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"7bb744bd4cd1ef6.json","parameterValues":[]}